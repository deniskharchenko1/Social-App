{"version":3,"sources":["components/header/index.ts","components/header/header.tsx","components/spinner/spinner.tsx","components/spinner/index.ts","components/alert/alert.tsx","components/user/people-item/people-item.tsx","redux/users/types.ts","components/user/people-list/people-list.tsx","redux/users/actions.ts","components/user/person-details/person-details.tsx","redux/posts/types.ts","components/post/post-item/post-item.tsx","components/post/post-list/post-list.tsx","redux/posts/actions.ts","redux/comments/types.ts","components/comment/comments-item/comments-item.tsx","components/comment/comments-list/comments-list.tsx","redux/comments/actions.ts","redux/users/usersReducer.ts","redux/posts/postsReducer.ts","redux/comments/commentsReducer.ts","redux/rootReducer.ts","redux/users/api.ts","redux/users/sagas.ts","redux/posts/api.ts","redux/posts/sagas.ts","redux/comments/api.ts","redux/comments/sagas.ts","redux/rootSagas.ts","components/app/app.tsx","components/app/index.ts","index.js"],"names":["Header","className","to","Spinner","Alert","role","PeopleItem","peopleData","name","id","GET_USERS","GET_USERS_SUCCESS","GET_USERS_ERROR","GET_USER","GET_USER_SUCCESS","GET_USER_ERROR","PeopleList","useSelector","state","users","fetchedUsers","isLoading","error","dispatch","useDispatch","useEffect","type","useState","value","setValue","searchedUsers","useMemo","filter","user","toLowerCase","includes","memoizedCallback","useCallback","event","target","placeholder","onChange","map","PersonDetails","match","currentUser","userId","parseInt","params","payload","src","alt","email","phone","website","GET_ALL_POSTS","GET_ALL_POSTS_SUCCESS","GET_ALL_POSTS_ERROR","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","PostItem","postData","title","body","PostList","posts","fetchedAllPosts","getPosts","post","GET_COMMENTS","GET_COMMENTS_SUCCESS","GET_COMMENTS_ERROR","CommentsItem","commentsData","CommentsList","comments","fetchedComments","postId","getComments","comment","initialState","rootReducer","combineReducers","action","fetchUsers","a","fetch","response","json","getPerson","getUsersSaga","getUserSaga","call","put","stringError","String","usersSaga","takeEvery","getAllPosts","res","fetchPosts","getAllPostsSaga","getPostsSaga","allPosts","postsSaga","fetchComments","getCommentsSaga","commentsSaga","watchSagas","sagas","all","concat","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","run","App","path","exact","render","component","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0cdf1a2d.chunk.js","sourcesContent":["import Header from \"./header\";\n\nexport default Header;\n","import React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./header.css\";\n\nconst Header: FC = () => {\n  return (\n    <div className=\"header d-flex\">\n      <h3>\n        <Link to=\"/\">Social App</Link>\n      </h3>\n      <div>\n        <Link className=\"mr-3\" to=\"/people\">\n          People\n        </Link>\n        <Link className=\"mr-3\" to=\"/posts\">\n          Posts\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { FC } from \"react\";\n\nimport \"./spinner.css\";\n\nconst Spinner: FC = () => {\n  return (\n    <div className=\"lds-css\">\n      <div className=\"lds-double-ring\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import Spinner from \"./spinner\";\n\nexport default Spinner;\n","import React from \"react\";\n\nexport const Alert = () => {\n  return (\n    <div className=\"alert alert-warning\" role=\"alert\">\n      Что-то пошло не так\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./people-item.css\";\n\nimport { UserType } from \"../../../redux/users/type\";\n\ntype PropsType = {\n  peopleData: UserType;\n};\n\nconst PeopleItem: FC<PropsType> = ({ peopleData }) => {\n  return (\n    <li className=\"list-group-item\">\n      <p>{peopleData.name}</p>\n      <Link to={`/people/${peopleData.id}`}>Посмотреть пользователя</Link>\n    </li>\n  );\n};\n\nexport { PeopleItem };\n","export const GET_USERS = \"GET_USERS\";\nexport const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\nexport const GET_USERS_ERROR = \"GET_USERS_ERROR\";\n\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_ERROR = \"GET_USER_ERROR\";\n","import React, { FC, useEffect, useState, useMemo, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Spinner from \"../../spinner\";\nimport { Alert } from \"../../alert/alert\";\nimport \"./people-list.css\";\nimport { PeopleItem } from \"../people-item\";\nimport { getUsers } from \"../../../redux/users/actions\";\nimport { RootStateType } from \"../../../redux/type\";\n\nconst PeopleList: FC = () => {\n  const {\n    fetchedUsers: users,\n    isLoading,\n    error,\n  } = useSelector((state: RootStateType) => {\n    return state.users;\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n\n  const [value, setValue] = useState(\"\");\n\n  const searchedUsers = useMemo(() => {\n    return users.filter((user) => {\n      return user.name.toLowerCase().includes(value.toLowerCase());\n    });\n  }, [value, users]);\n\n  const memoizedCallback = useCallback(\n    (event) => setValue(event.target.value),\n    []\n  );\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <>\n      <div className=\"d-flex col-md-12\">\n        <form>\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"text\"\n              placeholder=\"Search user\"\n              className=\"form-control\"\n              onChange={memoizedCallback}\n            />\n          </div>\n        </form>\n      </div>\n      <div className=\"col-md-6\">\n        <ul className=\"item-list list-group\">\n          {searchedUsers.map((user) => (\n            <PeopleItem key={user.id} peopleData={user} />\n          ))}\n        </ul>\n      </div>\n      {error && <Alert />}\n    </>\n  );\n};\n\nexport { PeopleList };\n","import {\n  GET_USERS,\n  GET_USERS_SUCCESS,\n  GET_USERS_ERROR,\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_ERROR,\n} from \"./types\";\nimport {\n  GetUsersActionType,\n  GetUsersSuccessActionType,\n  GetUsersErrorActionType,\n  GetUserActionType,\n  GetUserSuccessActionType,\n  GetUserErrorActionType,\n  UserType,\n} from \"./type\";\n\nexport const getUsers = (): GetUsersActionType => {\n  return {\n    type: GET_USERS,\n  };\n};\nexport const getUsersSuccess = (\n  data: UserType[]\n): GetUsersSuccessActionType => {\n  return {\n    type: GET_USERS_SUCCESS,\n    payload: data,\n  };\n};\nexport const getUsersError = (error: string): GetUsersErrorActionType => {\n  return {\n    type: GET_USERS_ERROR,\n    payload: error,\n  };\n};\n\nexport const getUser = (id: number): GetUserActionType => {\n  return {\n    type: GET_USER,\n    payload: id,\n  };\n};\n\nexport const getUserSuccess = (data: UserType): GetUserSuccessActionType => {\n  return {\n    type: GET_USER_SUCCESS,\n    payload: data,\n  };\n};\n\nexport const getUserError = (error: string): GetUserErrorActionType => {\n  return {\n    type: GET_USER_ERROR,\n    payload: error,\n  };\n};\n","import React, { useEffect, FC } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { RouteComponentProps, match as matchThis } from \"react-router\";\n\nimport Spinner from \"../../spinner\";\nimport { Alert } from \"../../alert/alert\";\nimport \"./person-details.css\";\nimport { getUser } from \"../../../redux/users/actions\";\nimport { RootStateType } from \"../../../redux/type\";\n\ntype PropsType = RouteComponentProps & {\n  match: matchThis<{ userId: string }>;\n};\n\nconst PersonDetails: FC<PropsType> = ({ match }) => {\n  const {\n    currentUser: user,\n    isLoading,\n    error,\n  } = useSelector((state: RootStateType) => state.users);\n  const dispatch = useDispatch();\n\n  const userId = parseInt(match.params.userId);\n\n  useEffect(() => {\n    dispatch(getUser(userId));\n  }, [dispatch, userId]);\n\n  if (user == null) {\n    return <div>Выберите пользователя</div>;\n  }\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <>\n      <div className=\"col-md-12\">\n        <div className=\"person-details card\">\n          <img\n            className=\"person-image\"\n            src=\"https://via.placeholder.com/600/771796\"\n            alt=\"character\"\n          />\n          <div className=\"card-body\">\n            <h4>{user.name}</h4>\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">\n                <span className=\"term\">Email: </span>\n                <span>{user.email}</span>\n              </li>\n              <li className=\"list-group-item\">\n                <span className=\"term\">Phone: </span>\n                <span>{user.phone}</span>\n              </li>\n              <li className=\"list-group-item\">\n                <span className=\"term\">Website: </span>\n                <span>{user.website}</span>\n              </li>\n            </ul>\n            <Link to={`/posts/${user.id}`}>Посмотреть посты</Link>\n          </div>\n        </div>\n      </div>\n      {error && <Alert />}\n    </>\n  );\n};\n\nexport { PersonDetails };\n","export const GET_ALL_POSTS = \"GET_ALL_POSTS\";\nexport const GET_ALL_POSTS_SUCCESS = \"GET_ALL_POSTS_SUCCESS\";\nexport const GET_ALL_POSTS_ERROR = \"GET_ALL_POSTS_ERROR\";\n\nexport const GET_POSTS = \"GET_POSTS\";\nexport const GET_POSTS_SUCCESS = \"GET_POSTS_SUCCESS\";\nexport const GET_POSTS_ERROR = \"GET_POSTS_ERROR\";\n\nexport const SET_POST = \"SET_POST\";\n","import React, { FC } from \"react\";\nimport \"./post-item.css\";\nimport { Link } from \"react-router-dom\";\n\nimport { PostType } from \"../../../redux/posts/type\";\n\ntype PropsType = {\n  postData: PostType;\n};\n\nconst PostItem: FC<PropsType> = ({ postData }) => {\n  return (\n    <div className=\"list-group-item\" key={postData.id}>\n      <p className=\"post-list title\">{postData.title}</p> {postData.id}\n      <p>{postData.body}</p>\n      <Link to={`/comments/${postData.id}`}>Посмотреть комментарии</Link>\n    </div>\n  );\n};\n\nexport { PostItem };\n","import React, { useEffect, FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./post-list.css\";\nimport { RouteComponentProps, match as matchThis } from \"react-router\";\n\nimport Spinner from \"../../spinner/spinner\";\nimport { Alert } from \"../../alert/alert\";\nimport { getAllPosts, getPosts } from \"../../../redux/posts/actions\";\nimport { PostItem } from \"../post-item\";\nimport { RootStateType } from \"../../../redux/type\";\n\ntype PropsType = RouteComponentProps & {\n  match: matchThis<{ userId: string }>;\n};\n\nconst PostList: FC<PropsType> = ({ match }) => {\n  const {\n    fetchedAllPosts: posts,\n    isLoading,\n    error,\n  } = useSelector((state: RootStateType) => state.posts);\n\n  const dispatch = useDispatch();\n  const userId = parseInt(match.params.userId);\n\n  useEffect(() => {\n    if (userId) {\n      dispatch(getPosts(userId));\n    } else {\n      dispatch(getAllPosts());\n    }\n  }, [dispatch, userId]);\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <>\n      <div className=\"col-md-6\">\n        <div className=\"post-list post-group\">\n          {posts.map((post) => (\n            <PostItem key={post.id} postData={post} />\n          ))}\n        </div>\n      </div>\n      {error && <Alert />}\n    </>\n  );\n};\n\nexport { PostList };\n","import {\n  GET_POSTS,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_ERROR,\n  GET_ALL_POSTS,\n  GET_ALL_POSTS_SUCCESS,\n  GET_ALL_POSTS_ERROR,\n} from \"./types\";\nimport {\n  GetAllPostsActionType,\n  GetAllPostsSuccessActionType,\n  GetAllPostsErrorActionType,\n  GetPostsActionType,\n  getPostsSuccessActionType,\n  GetPostsErrorActionType,\n  PostType,\n} from \"./type\";\n\nexport const getAllPosts = (): GetAllPostsActionType => {\n  return {\n    type: GET_ALL_POSTS,\n  };\n};\nexport const getAllPostsSuccess = (\n  data: PostType[]\n): GetAllPostsSuccessActionType => {\n  return {\n    type: GET_ALL_POSTS_SUCCESS,\n    payload: data,\n  };\n};\nexport const getAllPostsError = (error: string): GetAllPostsErrorActionType => {\n  return {\n    type: GET_ALL_POSTS_ERROR,\n    payload: error,\n  };\n};\nexport const getPosts = (userId: number): GetPostsActionType => {\n  return {\n    type: GET_POSTS,\n    payload: userId,\n  };\n};\nexport const getPostsSuccess = (\n  data: PostType[]\n): getPostsSuccessActionType => {\n  return {\n    type: GET_POSTS_SUCCESS,\n    payload: data,\n  };\n};\nexport const getPostsError = (error: string): GetPostsErrorActionType => {\n  return {\n    type: GET_POSTS_ERROR,\n    payload: error,\n  };\n};\n","export const GET_COMMENTS = \"GET_COMMENTS\";\nexport const GET_COMMENTS_SUCCESS = \"GET_COMMENTS_SUCCESS\";\nexport const GET_COMMENTS_ERROR = \"GET_COMMENTS_ERROR\";\n","import React, { FC } from \"react\";\n\nimport \"./comments-item.css\";\nimport { CommentType } from \"../../../redux/comments/type\";\n\ntype PropsType = {\n  commentsData: CommentType;\n};\n\nconst CommentsItem: FC<PropsType> = ({ commentsData }) => {\n  return (\n    <div className=\"list-group-item\" key={commentsData.id}>\n      <p className=\"comments-list title\">{commentsData.name}</p>\n      {commentsData.id}\n      <p>{commentsData.body}</p>\n      <p className=\"comments-list email\">{commentsData.email}</p>\n    </div>\n  );\n};\n\nexport { CommentsItem };\n","import React, { useEffect, FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps, match as matchThis } from \"react-router\";\n\nimport \"./comments-list.css\";\nimport { getComments } from \"../../../redux/comments/actions\";\nimport { CommentsItem } from \"../comments-item\";\nimport { RootStateType } from \"../../../redux/type\";\nimport Spinner from \"../../spinner/spinner\";\nimport { Alert } from \"../../alert/alert\";\n\ntype PropsType = RouteComponentProps & {\n  match: matchThis<{ postId: string }>;\n};\n\nconst CommentsList: FC<PropsType> = ({ match }) => {\n  const {\n    fetchedComments: comments,\n    isLoading,\n    error,\n  } = useSelector((state: RootStateType) => state.comments);\n\n  const dispatch = useDispatch();\n  const postId = parseInt(match.params.postId);\n  useEffect(() => {\n    dispatch(getComments(postId));\n  }, [dispatch, postId]);\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <>\n      <div className=\"col-md-6\">\n        <div className=\"comments-list comments-group\">\n          {comments.map((comment) => (\n            <CommentsItem key={comment.id} commentsData={comment} />\n          ))}\n        </div>\n      </div>\n      {error && <Alert />}\n    </>\n  );\n};\n\nexport { CommentsList };\n","import {\n  GET_COMMENTS,\n  GET_COMMENTS_SUCCESS,\n  GET_COMMENTS_ERROR,\n} from \"./types\";\nimport {\n  GetCommentsActionType,\n  GetCommentsSuccessActionType,\n  GetCommentsErrorActionType,\n  CommentType,\n} from \"./type\";\n\nexport const getComments = (postId: number): GetCommentsActionType => {\n  return {\n    type: GET_COMMENTS,\n    payload: postId,\n  };\n};\n\nexport function getCommentsSuccess(\n  data: CommentType[]\n): GetCommentsSuccessActionType {\n  return {\n    type: GET_COMMENTS_SUCCESS,\n    payload: data,\n  };\n}\n\nexport function getCommentsError(error: string): GetCommentsErrorActionType {\n  return {\n    type: GET_COMMENTS_ERROR,\n    payload: error,\n  };\n}\n","import {\n  GET_USERS,\n  GET_USERS_SUCCESS,\n  GET_USERS_ERROR,\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_ERROR,\n} from \"./types\";\nimport { UserInitialStateType, UsersActions } from \"./type\";\n\nconst initialState: UserInitialStateType = {\n  isLoading: false,\n  error: \"\",\n  fetchedUsers: [],\n  currentUser: null,\n};\n\nexport const usersReducer = (\n  state = initialState,\n  action: UsersActions\n): UserInitialStateType => {\n  switch (action.type) {\n    case GET_USERS:\n      return { ...state, isLoading: true };\n    case GET_USERS_SUCCESS:\n      return { ...state, isLoading: false, fetchedUsers: action.payload };\n    case GET_USERS_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n\n    case GET_USER:\n      return { ...state, isLoading: true };\n    case GET_USER_SUCCESS:\n      return { ...state, isLoading: false, currentUser: action.payload };\n    case GET_USER_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import {\n  GET_POSTS,\n  GET_POSTS_SUCCESS,\n  GET_POSTS_ERROR,\n  GET_ALL_POSTS,\n  GET_ALL_POSTS_SUCCESS,\n  GET_ALL_POSTS_ERROR,\n} from \"./types\";\nimport { PostInitialStateType, PostsActions } from \"./type\";\n\nconst initialState: PostInitialStateType = {\n  isLoading: false,\n  error: \"\",\n  fetchedAllPosts: [],\n};\n\nexport const postsReducer = (\n  state = initialState,\n  action: PostsActions\n): PostInitialStateType | null => {\n  switch (action.type) {\n    case GET_ALL_POSTS:\n      return { ...state, isLoading: true };\n    case GET_ALL_POSTS_SUCCESS:\n      return { ...state, isLoading: false, fetchedAllPosts: action.payload };\n    case GET_ALL_POSTS_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n\n    case GET_POSTS:\n      return { ...state, isLoading: true };\n    case GET_POSTS_SUCCESS:\n      return { ...state, isLoading: false, fetchedAllPosts: action.payload };\n    case GET_POSTS_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import {\n  GET_COMMENTS,\n  GET_COMMENTS_SUCCESS,\n  GET_COMMENTS_ERROR,\n} from \"./types\";\nimport { CommentInitialStateType, CommentsActions } from \"./type\";\n\nconst initialState: CommentInitialStateType = {\n  isLoading: false,\n  error: \"\",\n  fetchedComments: [],\n};\n\nexport const commentsReducer = (\n  state = initialState,\n  action: CommentsActions\n): CommentInitialStateType => {\n  switch (action.type) {\n    case GET_COMMENTS:\n      return { ...state, isLoading: true };\n    case GET_COMMENTS_SUCCESS:\n      return { ...state, isLoading: false, fetchedComments: action.payload };\n    case GET_COMMENTS_ERROR:\n      return { ...state, isLoading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport { usersReducer } from \"./users/usersReducer\";\nimport { postsReducer } from \"./posts/postsReducer\";\nimport { commentsReducer } from \"./comments/commentsReducer\";\n\nexport const rootReducer = combineReducers({\n  users: usersReducer,\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n","import { UserType } from \"./type\";\n\nexport async function fetchUsers(): Promise<UserType[]> {\n  const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n  return await response.json();\n}\n\nexport async function getPerson(id: number): Promise<UserType> {\n  const user = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\n  return await user.json();\n}\n","import { takeEvery, put, call } from \"@redux-saga/core/effects\";\nimport { SagaIterator } from \"@redux-saga/core\";\n\nimport { GET_USERS, GET_USER } from \"./types\";\nimport {\n  getUsersSuccess,\n  getUsersError,\n  getUserSuccess,\n  getUserError,\n} from \"./actions\";\nimport { fetchUsers, getPerson } from \"./api\";\nimport { GetUserActionType } from \"./type\";\n\nfunction* getUsersSaga(): SagaIterator {\n  try {\n    const users = yield call(fetchUsers);\n    yield put(getUsersSuccess(users));\n  } catch (error) {\n    const stringError =\n      typeof error === \"string\"\n        ? error\n        : typeof error === \"object\"\n        ? String(error)\n        : \"error\";\n    yield put(getUsersError(stringError));\n  }\n}\n\nfunction* getUserSaga(action: GetUserActionType): SagaIterator {\n  try {\n    const user = yield call(() => getPerson(action.payload));\n\n    yield put(getUserSuccess(user));\n  } catch (error) {\n    const stringError =\n      typeof error === \"string\"\n        ? error\n        : typeof error === \"object\"\n        ? String(error)\n        : \"error\";\n    yield put(getUserError(stringError));\n  }\n}\n\nexport const usersSaga = [\n  takeEvery(GET_USERS, getUsersSaga),\n  takeEvery(GET_USER, getUserSaga),\n];\n","import { PostType } from \"./type\";\n\nexport async function getAllPosts(): Promise<PostType[]> {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\n  return await res.json();\n}\n\nexport const fetchPosts = async (userId: number): Promise<PostType[]> => {\n  const res = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?userId=${userId}`\n  );\n  return await res.json();\n};\n","import { takeEvery, put, call } from \"@redux-saga/core/effects\";\nimport { SagaIterator } from \"@redux-saga/core\";\n\nimport { GET_POSTS, GET_ALL_POSTS } from \"./types\";\nimport {\n  getPostsSuccess,\n  getPostsError,\n  getAllPostsSuccess,\n  getAllPostsError,\n} from \"./actions\";\nimport { fetchPosts, getAllPosts } from \"./api\";\nimport { GetPostsActionType } from \"./type\";\n\nfunction* getAllPostsSaga(): SagaIterator {\n  try {\n    const allPosts = yield call(getAllPosts);\n    yield put(getAllPostsSuccess(allPosts));\n  } catch (error) {\n    const stringError =\n      typeof error === \"string\"\n        ? error\n        : typeof error === \"object\"\n        ? String(error)\n        : \"error\";\n    yield put(getAllPostsError(stringError));\n  }\n}\n\nfunction* getPostsSaga(action: GetPostsActionType): SagaIterator {\n  try {\n    const posts = yield call(() => fetchPosts(action.payload));\n    yield put(getPostsSuccess(posts));\n  } catch (error) {\n    const stringError =\n      typeof error === \"string\"\n        ? error\n        : typeof error === \"object\"\n        ? String(error)\n        : \"error\";\n    yield put(getPostsError(stringError));\n  }\n}\n\nexport const postsSaga = [\n  takeEvery(GET_ALL_POSTS, getAllPostsSaga),\n  takeEvery(GET_POSTS, getPostsSaga),\n];\n","import { CommentType } from \"./type\";\n\nexport async function fetchComments(\n  postId: number | string\n): Promise<CommentType[]> {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return await response.json();\n}\n","import { takeEvery, put, call } from \"@redux-saga/core/effects\";\nimport { SagaIterator } from \"@redux-saga/core\";\n\nimport { GET_COMMENTS } from \"./types\";\nimport { getCommentsSuccess, getCommentsError } from \"./actions\";\nimport { fetchComments } from \"./api\";\n\nfunction* getCommentsSaga(action: any): SagaIterator {\n  try {\n    const comments = yield call(() => fetchComments(action.payload));\n    yield put(getCommentsSuccess(comments));\n  } catch (error) {\n    const stringError =\n      typeof error === \"string\"\n        ? error\n        : typeof error === \"object\"\n        ? String(error)\n        : \"error\";\n    yield put(getCommentsError(stringError));\n  }\n}\n\nexport const commentsSaga = [takeEvery(GET_COMMENTS, getCommentsSaga)];\n","import { all, Effect } from \"@redux-saga/core/effects\";\n\nimport { usersSaga } from \"./users/sagas\";\nimport { postsSaga } from \"./posts/sagas\";\nimport { commentsSaga } from \"./comments/sagas\";\n\nconst sagas: Array<Effect> = [];\n\nexport function* watchSagas() {\n  yield all(sagas.concat(usersSaga, postsSaga, commentsSaga));\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport Header from \"../header\";\nimport { PeopleList } from \"../user/people-list\";\nimport { PersonDetails } from \"../user/person-details\";\nimport { PostList } from \"../post/post-list\";\nimport { CommentsList } from \"../comment/comments-list\";\nimport { rootReducer } from \"../../redux/rootReducer\";\nimport { watchSagas } from \"../../redux/rootSagas\";\n\nimport \"./app.css\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst enhancer = applyMiddleware(sagaMiddleware);\n\nconst store = createStore(rootReducer, enhancer);\nsagaMiddleware.run(watchSagas);\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\ndeclare module \"react-redux\" {\n  interface DefaultRootState extends RootStoreType {}\n}\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div>\n            <Header />\n            <div className=\"row mb2\">\n              <Switch>\n                <Route\n                  path=\"/\"\n                  exact\n                  render={() => <h2>Welcome to Social-App</h2>}\n                />\n\n                <Route path=\"/people\" exact component={PeopleList} />\n                <Route path=\"/people/:userId?\" component={PersonDetails} />\n\n                <Route path=\"/posts/:userId?\" component={PostList} />\n                <Route path=\"/comments/:postId\" component={CommentsList} />\n                <Route render={() => <h2>Page not found</h2>} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n","import App from \"./app\";\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}